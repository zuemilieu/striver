class solution{
public:
  int n ;
 bool DFS(vector<vector<int>>& adj, int curr, vector<int> &color, int currColor){
    color[curr] = currColor;
   for(int &v : adj[curr]){
          if(color[v] == color[curr])
               return false;
           if(color[v] == -1)
              int colorofv = 1- currColor;
                  if(DFS(adj, v, color, colorofv)== false)
                      return false;
}
}
return true;
}
bool isBipartite(vector<vector<int>>& graph) {
 n = graph.size();
vector<int> color(n -1);
for(int i =0; i<n; i++){
   if(color[i] == -1 ){
     if(DFS(graph, i, color, 0) == false)
        return false;
}
}
return true;
}
};
